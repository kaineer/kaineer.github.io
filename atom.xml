<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Caramel sepulcrum]]></title>
  <link href="http://kaineer.info/atom.xml" rel="self"/>
  <link href="http://kaineer.info/"/>
  <updated>2016-03-29T21:15:47+05:00</updated>
  <id>http://kaineer.info/</id>
  <author>
    <name><![CDATA[Tangerine Cat]]></name>
    <email><![CDATA[kaineer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Зависимости внутри пакета в python]]></title>
    <link href="http://kaineer.info/blog/2015/05/06/python/"/>
    <updated>2015-05-06T15:48:00+05:00</updated>
    <id>http://kaineer.info/blog/2015/05/06/python</id>
    <content type="html"><![CDATA[<blockquote><p>Что за прелесть эти ваши сказочки..</p></blockquote>

<p>Питон чудо как хорош, когда дело касается скорости исполнения.
Простые программы из одного-двух классов исполняются, да и пишутся на нём быстро,
а иногда даже очень быстро.</p>

<p>Но вот как только тебе захочется сделать так, чтобы классы были разложены по файлам,
и начнёшь подтягивать зависимости из файла в файл при помощи <code>import</code>, можно садиться
в угол, брать попкорн и расплываться в чеширской, практически сардонической улыбке.</p>

<p>Небольшая пауза, пока я вычищаю из поста все ругательства, которые накопились за
пять дней &ldquo;знакомства&rdquo; с языком.</p>

<p>Тем не менее, способ справиться с &ldquo;кошмарным ужасом&rdquo; зависимостей есть.</p>

<!-- more -->


<p>Первое что надо запомнить:</p>

<figure class='code'><figcaption><span>foo.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">foo.bar</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Если вы делаете так, готовьтесь к неприятностям. Т.е. циклические зависимости,
переходящие в невозможность подгрузить какой-нибудь класс.
Происходит это не только потому, что модуль верхнего уровня может где-нибудь
понадобиться, сколько потому, что импортируя где-нибудь модуль <code>foo.pee</code>, вы
автоматически требуете, чтобы питон проимпортировал модуль <code>foo</code>. Проще говоря,
импортируем зависимости без напряжения - в модулях более нижнего уровня
из модулей более верхнего:</p>

<figure class='code'><figcaption><span>foo/bar.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">foo</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>и, с осторожностью, чтобы не зациклить импорты, зависимости между модулями
под модулями <code>foo.bar</code> и <code>foo.baz</code>.</p>

<p>Второе. Если в файле есть две часто используемые сущности, но по смыслу они
отличаются и довольно заметно, лучше их разнести по разным файлам.
В этом случае вам не придётся долго думать почему, потянув себе класс конфигурации
приложения, вы потянули зависимости логгера (например).</p>

<p>В целом же, как я уже и отмечал, скрипты на питоне пишутся быстро, исполняются
невероятно быстро, но отвратительно отлаживаются, т.ч. желаю вам терпения,
ну и, возможно, просветления на этом пути.</p>

<p>В следующих сериях (если дойдут руки):</p>

<ul>
<li>Как и чем тестировать в python</li>
<li>Как сделать пакет, чтобы поставить на другой машине через pip?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Алиасы для localhost]]></title>
    <link href="http://kaineer.info/blog/2015/04/09/localhost-aliases/"/>
    <updated>2015-04-09T11:47:22+05:00</updated>
    <id>http://kaineer.info/blog/2015/04/09/localhost-aliases</id>
    <content type="html"><![CDATA[<p>Давно хотелось делать для работы в проектах на своем компе
алиасы вида <code>project1.local</code>. Казалось бы, уж чего проще,
поставил <code>nginx</code>, отредактировал пару файлов и - вперед!</p>

<p>Совершенно согласен, особенно после того, как всё заработало
и больше не надо выискивать правильный рецепт.
Чтобы больше не искать, что именно надо делать и где, оставлю
рецепт здесь.</p>

<p>Перво-наперво, редактируем <code>/etc/hosts</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project1.local 127.0.0.1</span></code></pre></td></tr></table></div></figure>


<p>Во-вторых, предположим, наш проект запущен на порту 9999
и мы бы не хотели набивать порт. Пишем в <code>/etc/nginx/conf.d/project1.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>  listen 80;
</span><span class='line'>
</span><span class='line'>  server_name project1.local;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    proxy_pass http://127.0.0.1:9999/;
</span><span class='line'>    proxy_set_header Host $host;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Для каждого последующего проекта заменяем <code>project1</code> и <code>9999</code>
на имя проекта и номер порта и движемся дальше.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs. Каждый день что-нибудь новое]]></title>
    <link href="http://kaineer.info/blog/2015/04/07/emacs-bits/"/>
    <updated>2015-04-07T10:56:00+05:00</updated>
    <id>http://kaineer.info/blog/2015/04/07/emacs-bits</id>
    <content type="html"><![CDATA[<p>Сегодняшние герои - <code>projectile</code> и комбинация <code>C-h</code>.</p>

<p>Часто, начиная поиск в <code>projectile</code> при помощи <code>C-c p f</code> мне приходилось натыкаться
на кучу хлама из каталогов <code>tmp</code>, <code>log</code>, не говоря уже про содержимое каталога
контроля версий. Брр. Но чтение документации, даже изредка, приносит свои плоды.
А именно, открываем файл <code>$PROJECT_ROOT/.projectile</code>, добавляем</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+/app
</span><span class='line'>+/lib
</span><span class='line'>+/spec
</span><span class='line'>-/log
</span><span class='line'>-/tmp
</span><span class='line'>-/.hg
</span><span class='line'>-.*</span></code></pre></td></tr></table></div></figure>


<p>и ищем нужные файлы быстро и без головной боли.</p>

<p>Второе. Комбинация <code>C-h</code> сама по себе вызывает подсказку. Разнообразную, какую только
можно себе представить. Но, предположим, нам нужна подсказка по горячим клавишам
<code>projectile</code> или <code>perspective</code>. Лезть в документацию, выходя из Emacs? Нееет, можно
обойтись и без этого.</p>

<p>Например. Стандартный префикс команд в <code>projectile</code> - <code>C-c p</code>. Добавляем к нему <code>C-h</code> и - оп!
Получаем полный список команд <code>projectile</code>, вызываемых с клавиатуры.</p>

<p>Но моё удовольствие и удивление были бы неполными, если бы точно так же, нажав <code>C-x x C-h</code>
я бы не получил списка команд <code>perspective</code>. И в <code>yasnippet</code> та же история: <code>C-c &amp; C-h</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почему emacs?]]></title>
    <link href="http://kaineer.info/blog/2015/03/05/emacsing/"/>
    <updated>2015-03-05T14:36:00+05:00</updated>
    <id>http://kaineer.info/blog/2015/03/05/emacsing</id>
    <content type="html"><![CDATA[<p>Не помню, какой по счёту год пользования emacs, полет нормальный.</p>

<p>В какой-то момент, довольно протяженный во времени, уходил на sublime,
привлеченный магией, которую давал поиск по <code>C-p</code> - действительно,
потрясающая штуковина, которая в emacs до сих пор не реализована (или просто
я об этом не слышал).</p>

<p>Чем на данный момент emacs привлекает меня больше, чем sublime?</p>

<ul>
<li>Melpa - да, пакетный менеджер есть и в sublime, но когда я узнал,
что он есть в emacs, это сильно сместило баланс
(до этого приходилось каждый пакет скачивать и размещать ручками)</li>
<li>Projectile (поиск файла в проекте, в т.ч. fuzzy)</li>
<li>Perspective (больше не нужно держать открытыми несколько emacs-ов одновременно)</li>
<li>imenu - поиск метода в текущем файле,
отвратительно ведёт себя в javascript, но хорош в coffeescript и ruby</li>
<li>Работа с системами контроля версий. Не всегда прямая и приятная,
но в sublime она тоже не идеальна</li>
<li>Отсутствие напоминашек. Да, мне жалко 60 баксов на sublime.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто ты такой]]></title>
    <link href="http://kaineer.info/blog/2013/11/27/who-are-you/"/>
    <updated>2013-11-27T17:56:00+06:00</updated>
    <id>http://kaineer.info/blog/2013/11/27/who-are-you</id>
    <content type="html"><![CDATA[<p>Кто ты такой, чтобы указывать мне, учить меня, исследовать меня, игнорировать меня?
Кто я такой, я сам, чтобы задавать вопросы и беспокоить кого бы то ни было?
Кто мы, кем мы будем, когда смысл вопросов перестанет быть смыслом?</p>

<p>В чём печаль? В том, что время, отпущенное нам, конечно.
Чему же тогда радоваться?</p>

<p>Радоваться стоит тому, что отпущенное нам время закончилось не вчера.
Оно закончилось не пять минут назад, не только что.
И это, само по себе, уже кое-что.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почему bluepill не мониторит мою задачу?]]></title>
    <link href="http://kaineer.info/blog/2013/09/26/daemonize-with-bluepill/"/>
    <updated>2013-09-26T13:09:00+06:00</updated>
    <id>http://kaineer.info/blog/2013/09/26/daemonize-with-bluepill</id>
    <content type="html"><![CDATA[<p>Случается <s>страшное</s> неприятное: падает процесс, поддерживающий работоспособность
вашего приложения и перестаёт ходить почта, обновляться данные и много чего ещё.
Узнаёте вы об этом из вопросов ваших пользователей, большая часть которых сводится
к фразе &ldquo;почему, собственно?&rdquo; Это если опустить все остальные, нецензурные слова.</p>

<p>Но, думаете вы себе, я же всё настроил, сказал <code>bluepill</code>, что вот мои процессы,
запускай их так-то и если процесс умер, запускай его снова? Возможно, что так
оно и есть, но процесс падает и не перезапускается. Так тоже бывает.</p>

<!-- more -->


<p>Что делать в этой ситуации? Первое, очевидное решение, которое мне в голову
пришло гораздо позже, чем должно было, посмотреть лог <code>bluepill</code>.
Там бывает много интересного, например сообщение о том, что приложение
слишком долго стартует и, возможно, оно не демонизировано.</p>

<p>Итак, что можно попробовать, в порядке убывания очевидности:</p>

<ul>
<li>Посмотреть статус процессов запущенных от лица bluepill, командой <code>bluepill status</code> &ndash; если обнаружены процессы со статусом <code>unmonitored</code> &ndash; это то самое, что мы и будем пытаться исправить дальше</li>
<li>Добавить в dsl-блок соответствующих процессов вызов <code>daemonize!</code> если он ещё не там. Это бывает, сам видел</li>
<li>Если и после этого в логе пишется (дальше вольный перевод с английского) &ldquo;Задача слишком долго стартует. Не буду её мониторить&rdquo;, попробуйте добавить <code>start_grace_time 30.seconds</code>. Количество секунд варьируется по запросам запускаемого приложения. Чтобы примерно прикинуть, сколько потребуется, запустите приложение ручками и умножьте время запуска на полтора</li>
<li>Ещё раз посмотрите, что там в логах, проверьте статус, может уже всё хорошо</li>
<li>Вы, кстати, перезагружали <code>bluepill</code> после каждого изменения конфигурации? Если нет, самое время попробовать. Между прочим: команда <code>bluepill stop</code> и последующая <code>bluepill start</code> не приводят к перечитыванию конфигурации. Рекомендую <code>bluepill quit</code> и <code>bluepill load /path/to/config_file</code>.</li>
</ul>


<p>Примерно этот список рекомендаций позволил бы мне сократить время копания
в гугле и попыток &ldquo;заставить всё работать&rdquo; примерно с часа до минут десяти,
или даже пяти :) Удачи.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Минутка ненависти]]></title>
    <link href="http://kaineer.info/blog/2013/01/25/rage-minute/"/>
    <updated>2013-01-25T18:43:00+06:00</updated>
    <id>http://kaineer.info/blog/2013/01/25/rage-minute</id>
    <content type="html"><![CDATA[<p>Внезапно обнаружил, что точка входа в ruby-объект может находиться в <s>жо</s> не совсем
подходящем месте, а именно, в <code>private</code> секции:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PrivateMethodMissing</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">sym</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello, it&#39;s me, </span><span class="si">#{</span><span class="n">sym</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">PrivateMethodMissing</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>Всех, кто при мне будет пользоваться этим &ldquo;умным способом&rdquo;, буду дварковать.
Да-да, влендишным способом.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Линки и открытия прошлой недели]]></title>
    <link href="http://kaineer.info/blog/2012/09/13/last-week/"/>
    <updated>2012-09-13T15:51:00+06:00</updated>
    <id>http://kaineer.info/blog/2012/09/13/last-week</id>
    <content type="html"><![CDATA[<h3>ActiveAdmin 0.5.0</h3>

<p><a href="http://reverbhq.com/blog/2012/08/activeadmin-0-5-0-is-released/">Обновление</a>, которое пока что можно игнорировать.
Если, конечно, вас не забрасывает письмами <code>cron</code>.</p>

<p>Парочка волшебных слов, связанных с этой темой: <a href="http://blog.agile-pandas.com/2011/07/06/activeadmin-beyond-the-basics"><code>table_for</code></a>
и <a href="http://activeadmin.info/docs/9-batch-actions.html"><code>selectable_column</code></a>.</p>

<p><code>table_for</code> помогает оформить таблицу, которую придётся рендерить там, где раньше использовался класс <code>Dashboard</code>,
а <code>selectable_column</code> используется, если нужно добавить в <code>index</code> колонку, по которой можно будет выбрать
несколько элементов для последующего, например, удаления.</p>

<h3>jQuery 1.8.1 и Backbone 0.9.2</h3>

<p>Внезапный выход gem-а, содержащего jQuery 1.8.1 доставил мне минут десять неприятных ощущений, а-ля &ldquo;я всё сломал!&rdquo;</p>

<p>Что характерно, jQuery 1.8.1 и Backbone работают отлично, если брать 0.9.2 из репозитария. Но версия в соответствующем
gem-е заметно отличается от содержимого репозитария. Как результат &ndash; события вьюхи банально не вызывали обработчики.
Учитывая, что репозитарий <code>rails-backbone</code> не обновлялся с апреля 2012 года, выход видится только один &ndash; зажать версию
<code>jquery-rails</code> на 2.1.1 и читать новости &ndash; вот выйдет версия Backbone 0.9.3, например, сделают для него отдельную
версию gem-а и всё заработает ;)</p>

<h3>cdnjs и jsfiddle</h3>

<p>Про <a href="http://cdnjs.com">cdnjs</a> я действительно узнал совсем недавно.
Возможность в любой момент вытянуть жаваскриптовую библиотеку из одного места,
не залезая в Google может пригодиться. Особенно если просядет Google :)</p>

<p>JsFiddle, скорее, наоборот - огорчил. Не знаю, был это глюк или реально заложенное ограничение,
но в результат попадали только две жаваскриптовые библиотеки из назначенных.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin 0.5 и почему меня должна волновать новая версия]]></title>
    <link href="http://kaineer.info/blog/2012/09/04/activeadmin-0-dot-5/"/>
    <updated>2012-09-04T14:45:00+06:00</updated>
    <id>http://kaineer.info/blog/2012/09/04/activeadmin-0-dot-5</id>
    <content type="html"><![CDATA[<p>Всё портится, даже в том случае, если что-то становится лучше.
Вот, например, <a href="http://activeadmin.info/documentation.html">ActiveAdmin</a> - удобная штука для тех, кому лень писать собственную админку.
И правильно, не <s>царское</s> для разработчиков это дело.
Но иногда приходится.
И вот вдруг, когда dashboard в админке давно написан и забыт,
приходит <a href="http://reverbhq.com/blog/2012/08/activeadmin-0-5-0-is-released/">обновление</a>,
которое, в частности, гнусно намекает, что в следующем обновлении dashboard
вообще будут исключены и приложение, что? &ndash; правильно, запускаться не будет вообще.</p>

<!--more-->


<p>&ldquo;Кот в панике&rdquo;. Но решение &ndash; есть. Например, <a href="http://blog.tech-angels.com/post/29129191052/using-activeadmin-master-branch">тут</a> рассказано, что содержимое <code>app/admin/dashboards.rb</code> можно заменить на:</p>

<figure class='code'><figcaption><span>Page вместо Dashboard - dashboards.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">ActiveAdmin</span><span class="o">.</span><span class="n">register_page</span> <span class="s2">&quot;Dashboard&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">controller</span><span class="o">.</span><span class="n">skip_before_filter</span> <span class="ss">:authenticate</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:index</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">menu</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:label</span> <span class="o">=&gt;</span> <span class="nb">proc</span><span class="p">{</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;active_admin.dashboard&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">content</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="nb">proc</span><span class="p">{</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;active_admin.dashboard&quot;</span><span class="p">)</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Тут содержимое страницы</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Почти что &ldquo;ура&rdquo;. Плохо только то, что старое содержимое
стало отрисовываться без стилей, без заголовков и т.п.</p>

<p>Код для отрисовки таблиц берём <a href="http://blog.agile-pandas.com/2011/07/06/activeadmin-beyond-the-basics">отсюда</a>. Он может выглядеть, например, так:</p>

<figure class='code'><figcaption><span>Оформляем dashboards.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># ...</span>
</span><span class='line'>   <span class="n">panel</span><span class="p">(</span><span class="s2">&quot;Название панели&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">table_for</span><span class="p">(</span><span class="no">ModelName</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>       <span class="n">column</span> <span class="ss">:email</span>
</span><span class='line'>       <span class="n">column</span> <span class="ss">:created_at</span>
</span><span class='line'>       <span class="c1"># Здесь делаем всё то же, что привыкли использовать</span>
</span><span class='line'>       <span class="c1">#   на странице списка для моделей</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1"># ...</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вот, вроде, и всё. Будем ждать новых релизов ActiveAdmin :)</p>

<h2>Список используемой литературы</h2>

<ul>
<li><a href="http://activeadmin.info/documentation.html">Active Admin | Documentation</a></li>
<li><a href="http://reverbhq.com/blog/2012/08/activeadmin-0-5-0-is-released/">Active Admin 0.5.0 has been released!</a></li>
<li><a href="http://blog.agile-pandas.com/2011/07/06/activeadmin-beyond-the-basics">ActiveAdmin: Beyond the basics - The Agile Panda Blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caller &amp; Pry]]></title>
    <link href="http://kaineer.info/blog/2011/12/12/caller-and-pry/"/>
    <updated>2011-12-12T14:09:00+06:00</updated>
    <id>http://kaineer.info/blog/2011/12/12/caller-and-pry</id>
    <content type="html"><![CDATA[<p>Когда у меня отказывают мозги, я берусь за отладчик.
Если бы не необходимость писать код, я бы из него не вылезал вообще.
И отсутствие толкового отладчика в Ruby меня до сих пор очень расстраивает.</p>

<!-- more -->


<p>Представим себе ситуацию: в трёх практически одинаковых контроллерах по
совершенно идентичному набору параметров производятся абсолютно одинаковые
действия. Результат этих действий - заполненная этими действиями форма добавления
объекта в таблицу. Десять отличий между тремя вариантами найдены, вынесены в параметры,
всё отлично заполняется, но: в двух случаях заполненные данные попадают куда надо,
в третьем - хрррррр!</p>

<p>Начинаем копать всякие before_filter, фильтры в самой модели - ничего.</p>

<p>Отладчика, которым мне не больно и не противно было бы пользоваться, в наличии нет.
(Любители IDE идут в обнимку с их IDE куда-нибудь, где java не тормозит под убунтой).</p>

<p>Итак, отладчика нет, а брэйкпоинт поставить надо. Аккуратно добавляем в исследуемую модель
конструктор:</p>

<figure class='code'><figcaption><span>weird_model.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>и, как только pry выбрасывает нас в консоль, смотрим значение, возвращаемое caller.</p>

<p>В результате выяснилось, что второй экземпляр модели создавался во вьюхе.
Баг пофикшен, блогпост написан, кому уходит луч поноса - тоже ясно.</p>

<p>Осталось вычистить все binding.pry и всю байду, которую добавил в процессе отладки.</p>

<h2>Список используемой литературы</h2>

<ul>
<li><a href="http://pry.github.com/">PRY: Get to the code</a></li>
<li><a href="http://www.ruby-lang.org/en/">Ruby. A Programmer&rsquo;s Best Friend</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Папа, настрой nginx]]></title>
    <link href="http://kaineer.info/blog/2011/09/08/makeanginx/"/>
    <updated>2011-09-08T10:36:00+06:00</updated>
    <id>http://kaineer.info/blog/2011/09/08/makeanginx</id>
    <content type="html"><![CDATA[<p>Есть задача, даже две. Первая - разобраться с настройкой nginx для отдачи rails-статики
и балансировки двух (трёх, сколько нужно), mongrel-ов. Вторая - всё то же самое, но без mongrel,
а с использованием passenger и, главное, через capistrano.</p>

<!-- more -->


<h2>Nginx + mongrels</h2>

<p>Первую задачу я реализовывал локально, на своей уютненькой убунте и всё решилось сравнительно
мирно.</p>

<p>Убрал из дефолтной конфигурации все директивы server и upstream,
оставил только директивы include - так гибче, если что.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##
</span><span class='line'># Virtual Host Configs
</span><span class='line'>##
</span><span class='line'>
</span><span class='line'>include /etc/nginx/conf.d/*.conf;
</span><span class='line'>include /etc/nginx/sites-enabled/*;</span></code></pre></td></tr></table></div></figure>


<p>Добавил в отдельный файл конфигурацию апстрима на двух монгрелах (важен был сам принцип, а не количество)
и сервер:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upstream mongrel { # &lt;-- имя upstream-а для ссылок на него
</span><span class='line'>  server localhost:3000; # Первый mongrel
</span><span class='line'>  server localhost:3001; # Второй mongrel
</span><span class='line'>  # &lt;-- добавить mongrel-ы по вкусу
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>  listen           8084; # &lt;-- номер порта
</span><span class='line'>  server_name      ~^(?&lt;subdomain>[-\w]+)\.lvh\.me$; # &lt;-- Запоминаем subdomain
</span><span class='line'>  access_log       off;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    proxy_pass       http://mongrel;
</span><span class='line'>    proxy_set_header Host $subdomain.lvh.me:8084; # &lt;-- Передаём subdomain и port
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  location ~ ^/(image|stylesheet|javascript)s {
</span><span class='line'>    root             /home/user_name/devel/rails/project_name/public;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Отдельный пункт в первой задаче был - сохранить для использования в рельсовских контроллерах
субдомен, пришедший в запросе. Что и было реализовано при помощи server_name с регулярным выражением
и proxy_set_header с использованием пришедшего из регэкспа поля $subdomain. Без передачи параметра
Host в запросе к приложению приходил параметр &ldquo;mongrel&rdquo; с никаким субдоменом, а без передачи порта
возникали проблемы с открытием следующих страниц (редиректы, ссылки и т.п.)</p>

<p>Теперь заходим на organization_name.lvh.me:8084 и в приложение приходят запросы с указанным субдоменом
и разбрасываются между монгрелами. Как-то так.</p>

<h2>Capistrano, а потом passenger</h2>

<p>На самом деле, мне просто хотелось лёгкого деплоя. И поэтому я решил что на другую машину я буду
деплоить при помощи capistrano. А passenger всплыл уже потом.</p>

<p>Начинаем, как водится, с нуля:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /home/user_name/devel/rails/project_name
</span><span class='line'>$ capify .
</span><span class='line'>$ emacs -nw config/deploy.rb # &lt;-- Вместо emacs используйте Ваш любимый редактор ;)</span></code></pre></td></tr></table></div></figure>


<p>Полученный Capfile оставляем в покое, а вот с config/deploy.rb пришлось потанцевать,
по целому ряду причин. Во-первых, мне категорически не хотелось использовать sudo
при деплое, во-вторых, мне не хотелось вводить пароли при каждом деплое, в третьих,
на удалённой машинке rvm был установлен из-под root-а.</p>

<p>Итак, берём deploy.rb и внимательно на него смотрим.</p>

<figure class='code'><figcaption><span>config/deploy.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">### Где всё будет происходить</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s2">&quot;195.151.207.37&quot;</span>                   <span class="c1"># Машинка, куда всё будет деплоиться</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="s2">&quot;195.151.207.37&quot;</span>                   <span class="c1"># Как правило, то же самое, что :web</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="s2">&quot;195.151.207.37&quot;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="c1"># А здесь будет лежать база данных</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">### Что ставим, куда ставим</span>
</span><span class='line'><span class="c1">#     1. Имя приложения</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span>     <span class="s2">&quot;your_application_name&quot;</span>
</span><span class='line'><span class="c1">#     2. Куда ставим</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span>       <span class="s2">&quot;/home/user_name/deploy_path&quot;</span>
</span><span class='line'><span class="c1">#     3. Откуда берём исходники</span>
</span><span class='line'><span class="c1">#        В нашем случае исходники лежали на bitbucket, но никто не запрещает держать</span>
</span><span class='line'><span class="c1">#        их на github или другом хостинге для исходников.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>      <span class="s2">&quot;ssh://hg@bitbucket.org/account_name/repository_name&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span>             <span class="ss">:mercurial</span>
</span><span class='line'><span class="c1">#     4. Кем ставим</span>
</span><span class='line'><span class="c1">#        Собой, любимым</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span>        <span class="s2">&quot;user_name&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span>    <span class="kp">false</span>
</span><span class='line'><span class="c1">#     5. Форвардим ssh-agent, чтобы удалённая машина знала, что это мы.</span>
</span><span class='line'><span class="c1">#        Разумеется, на удалённой машине должен лежать Ваш public key,</span>
</span><span class='line'><span class="c1">#        и на bitbucket - тоже</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span><span class="ss">:forward_agent</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">### Bundler</span>
</span><span class='line'><span class="c1">#     1. bundle install автоматически</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span><span class='line'><span class="c1">#     2. bundle install в домашний каталог (чтобы не запускать рутом)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:bundle_flags</span><span class="p">,</span> <span class="s2">&quot;--deployment --quiet --path=/home/user_name/bundle&quot;</span>
</span><span class='line'><span class="c1">#     3. bundle install, но с локальными настройками из $shared_path</span>
</span><span class='line'><span class="n">before</span> <span class="s2">&quot;bundle:install&quot;</span><span class="p">,</span>     <span class="s2">&quot;bundler:config_symlink&quot;</span>
</span><span class='line'><span class="n">after</span>  <span class="s2">&quot;deploy:setup&quot;</span><span class="p">,</span>       <span class="s2">&quot;bundler:config_setup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:bundler</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Создаём каталог, куда будут сохраняться локальные настройки bundler-а</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:config_setup</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/bundler_config&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Создаём линк на каталог, чтобы bundler не создавал ./.bundler по-новой</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:config_symlink</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2"> &amp;&amp; ln -s </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/bundler_config .bundle&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">### Копируем данные, лежащие в shared/config в свой config</span>
</span><span class='line'><span class="c1">#    config/database.yml, например</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#    Не забудьте предварительно создать сам каталог и всё, что в нём должно лежать!</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="n">after</span>  <span class="s2">&quot;deploy:update_code&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:copy_config&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1">### А этот код достаточно просто раскомментировать</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:stop</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;touch </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span><span class="s1">&#39;restart.txt&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:copy_config</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cp </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/* </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Примерно так стал выглядеть deploy.rb на моей машинке (если комментарии не считать).
В процессе мне пришлось разбираться, как настроить ssh-forwarding, как запускать
на удалённой машине ssh-agent и как запускать passenger в standalone режиме
и что man-ы и официальная документация are the developer&rsquo;s best friends.</p>

<p>И всё было почти хорошо. И деплой проходил, не заканчиваясь сообщением, что какая-то команда
не прошла, но вот рестарт passenger-а не происходил. Вот если бы passenger-а можно было бы
запускать с командной строки, указывая, в каком каталоге будет производиться запуск, тогда бы,
возможно, следующую часть можно было бы и опустить. А так мне пришлось устанавливать passenger
в конкретном gemset-е, в нём же запускать установку nginx-модуля для passenger и настраивать
nginx уже на работу с /home/user_name/deploy_path/public.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo rvm 1.9.2@project gem install passenger
</span><span class='line'>$ sudo rvm 1.9.2@project passenger-install-nginx-module
</span><span class='line'>$ sudo rvm 1.9.2@project passenger-config --root # &lt;-- Отсюда возьмём путь к passenger-у
</span><span class='line'>$ sudo vi /opt/nginx/conf/nginx.conf             # &lt;-- Да, иногда я пользуюсь vi. Особенно на удалённых машинах ;)</span></code></pre></td></tr></table></div></figure>


<p>Дальше - правки, внесенные в /opt/nginx/conf/nginx.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http {
</span><span class='line'>    # Сюда пишем то, что выдала команда passenger-config --root
</span><span class='line'>    passenger_root /usr/local/rvm/gems/ruby-1.9.2-p290@crm/gems/passenger-3.0.9;
</span><span class='line'>    # Эту строчку выставляет passenger-install-nginx-module (а откуда ещё я мог её взять?)
</span><span class='line'>    passenger_ruby /usr/local/rvm/wrappers/ruby-1.9.2-p290@crm/ruby;
</span><span class='line'>...
</span><span class='line'>    # А вот этот кусочек я написал, глядя в руководство
</span><span class='line'>    server {
</span><span class='line'>      listen 80;
</span><span class='line'>      server_name _;
</span><span class='line'>      root /home/user_name/deploy_path/current/public;
</span><span class='line'>      passenger_enabled on;
</span><span class='line'>    }
</span><span class='line'>...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Перезапускаем nginx и идём пить кефир.</p>

<h2>Список используемой литературы</h2>

<ul>
<li><a href="http://unixwiz.net/techtips/ssh-agent-forwarding.html">An Illustrated Guide to SSH Agent Forwarding</a></li>
<li><a href="http://sysoev.ru/nginx/docs/">nginx, документация на сайте автора</a>

<ul>
<li><a href="http://sysoev.ru/nginx/docs/http/ngx_http_core_module.html">Core module</a></li>
<li><a href="http://sysoev.ru/nginx/docs/http/ngx_http_upstream.html">Upstream module</a></li>
</ul>
</li>
<li><a href="http://www.modrails.com/documentation/Users%20guide%20Nginx.html">Phusion Passenger users guide, Nginx version</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Daring Fireball: Markdown Syntax</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пилим linkify tweet]]></title>
    <link href="http://kaineer.info/blog/2011/08/09/pilim_linkify/"/>
    <updated>2011-08-09T10:02:00+06:00</updated>
    <id>http://kaineer.info/blog/2011/08/09/pilim_linkify</id>
    <content type="html"><![CDATA[<p>Допилил октопрессовский <code>twitter.js</code>, теперь в импортированных твитах
выделяются тэги с кириллицей.</p>

<!-- more -->


<p>Вкратце, в регекспах, выбирающих тэги в твитах заменил <code>(\w+)</code> на
<code>([\wа-яА-ЯёЁ]+)</code>. Для тех, кто не любит ковыряться в коде, полный вариант
исходной и заменённой функции:</p>

<figure class='code'><figcaption><span>До допиливания - twitter.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">linkifyTweet</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(https?:\/\/)([\w\-:;?&amp;=+.%#\/]+)/gi</span><span class="p">,</span> <span class="s1">&#39;&lt;a href=&quot;$1$2&quot;&gt;$2&lt;/a&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^|\W)@(\w+)/g</span><span class="p">,</span> <span class="s1">&#39;$1&lt;a href=&quot;http://twitter.com/$2&quot;&gt;@$2&lt;/a&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^|\W)#(\w+)/g</span><span class="p">,</span> <span class="s1">&#39;$1&lt;a href=&quot;http://search.twitter.com/search?q=%23$2&quot;&gt;#$2&lt;/a&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>После допиливания - twitter.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">linkifyTweet</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(https?:\/\/)([\w\-:;?&amp;=+.%#\/]+)/gi</span><span class="p">,</span> <span class="s1">&#39;&lt;a href=&quot;$1$2&quot;&gt;$2&lt;/a&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^|\W)@([\wа-яА-ЯёЁ]+)/g</span><span class="p">,</span> <span class="s1">&#39;$1&lt;a href=&quot;http://twitter.com/$2&quot;&gt;@$2&lt;/a&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^|\W)#([\wа-яА-ЯёЁ]+)/g</span><span class="p">,</span> <span class="s1">&#39;$1&lt;a href=&quot;http://search.twitter.com/search?q=%23$2&quot;&gt;#$2&lt;/a&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Оно работает! Но, блин, как..]]></title>
    <link href="http://kaineer.info/blog/2011/08/08/"/>
    <updated>2011-08-08T16:52:00+06:00</updated>
    <id>http://kaineer.info/blog/2011/08/</id>
    <content type="html"><![CDATA[<p>На днях исправлял чудесный, феерический баг в коде, уже успевшем стать древним (просто потому, что мой склероз прогрессирует заметно быстрее,
чем я пишу код). Вкратце, берётся инпут, обвешивается несколькими способами обработчиками, после чего в инпут вводится значение и..
и обработчики не работают!</p>

<!-- more -->


<p>Через минут двадцать я обнаруживаю, что $(искомый инпут).data() - девственно пуст. Ещё получаса мне хватило на то, чтобы додуматься почесать
скрипт grep-ом. И опаньки! В тот момент, когда инпут получает фокус я делаю (барабанная дробь) .unbind <em>без параметров</em>. (Старательно выношу матершинные слюни за скобки).</p>

<figure class='code'><figcaption><span>Никогда так не делайте - focus.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input.dummy_data&quot;</span><span class="p">).</span><span class="nx">focus</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;dummy_data&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">unbind</span><span class="p">();</span> <span class="c1">// Вот в этом месте все обработчики дружно собираются и уходят курить</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Мораль сей басни - учите, господа, матчасть. В своё время я использовал .unbind чтобы второй раз не вызывать обработчик по событию .focus.
И хотя самостоятельно отрубать себе же руки (хэндлы) я в виду не имел, но очень даже это сделал.</p>

<p>P.S.</p>

<figure class='code'><figcaption><span>Правильный вариант обработчика - focus.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input.dummy_data&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;focus.placeholder&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$this</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Очищаем значение, как и планировалось</span>
</span><span class='line'>  <span class="nx">$this</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Убираем стиль, чтобы снять оформление</span>
</span><span class='line'>  <span class="nx">$this</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;dummy_data&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Аккуратно убираем обработчик события, не трогая остальные</span>
</span><span class='line'>  <span class="nx">$this</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;focus.placeholder&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
