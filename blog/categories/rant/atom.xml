<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Тег: rant | Caramel sepulcrum]]></title>
  <link href="http://kaineer.github.io/blog/categories/rant/atom.xml" rel="self"/>
  <link href="http://kaineer.github.io/"/>
  <updated>2015-12-23T15:28:53+05:00</updated>
  <id>http://kaineer.github.io/</id>
  <author>
    <name><![CDATA[Tangerine Cat]]></name>
    <email><![CDATA[kaineer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Зависимости внутри пакета в python]]></title>
    <link href="http://kaineer.github.io/blog/2015/05/06/python/"/>
    <updated>2015-05-06T15:48:00+05:00</updated>
    <id>http://kaineer.github.io/blog/2015/05/06/python</id>
    <content type="html"><![CDATA[<blockquote><p>Что за прелесть эти ваши сказочки..</p></blockquote>

<p>Питон чудо как хорош, когда дело касается скорости исполнения.
Простые программы из одного-двух классов исполняются, да и пишутся на нём быстро,
а иногда даже очень быстро.</p>

<p>Но вот как только тебе захочется сделать так, чтобы классы были разложены по файлам,
и начнёшь подтягивать зависимости из файла в файл при помощи <code>import</code>, можно садиться
в угол, брать попкорн и расплываться в чеширской, практически сардонической улыбке.</p>

<p>Небольшая пауза, пока я вычищаю из поста все ругательства, которые накопились за
пять дней &ldquo;знакомства&rdquo; с языком.</p>

<p>Тем не менее, способ справиться с &ldquo;кошмарным ужасом&rdquo; зависимостей есть.</p>

<!-- more -->


<p>Первое что надо запомнить:</p>

<p><figure class='code'><figcaption><span>foo.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">foo.bar</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Если вы делаете так, готовьтесь к неприятностям. Т.е. циклические зависимости,
переходящие в невозможность подгрузить какой-нибудь класс.
Происходит это не только потому, что модуль верхнего уровня может где-нибудь
понадобиться, сколько потому, что импортируя где-нибудь модуль <code>foo.pee</code>, вы
автоматически требуете, чтобы питон проимпортировал модуль <code>foo</code>. Проще говоря,
импортируем зависимости без напряжения - в модулях более нижнего уровня
из модулей более верхнего:</p>

<p><figure class='code'><figcaption><span>foo/bar.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">foo</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>и, с осторожностью, чтобы не зациклить импорты, зависимости между модулями
под модулями <code>foo.bar</code> и <code>foo.baz</code>.</p>

<p>Второе. Если в файле есть две часто используемые сущности, но по смыслу они
отличаются и довольно заметно, лучше их разнести по разным файлам.
В этом случае вам не придётся долго думать почему, потянув себе класс конфигурации
приложения, вы потянули зависимости логгера (например).</p>

<p>В целом же, как я уже и отмечал, скрипты на питоне пишутся быстро, исполняются
невероятно быстро, но отвратительно отлаживаются, т.ч. желаю вам терпения,
ну и, возможно, просветления на этом пути.</p>

<p>В следующих сериях (если дойдут руки):</p>

<ul>
<li>Как и чем тестировать в python</li>
<li>Как сделать пакет, чтобы поставить на другой машине через pip?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто ты такой]]></title>
    <link href="http://kaineer.github.io/blog/2013/11/27/who-are-you/"/>
    <updated>2013-11-27T17:56:00+06:00</updated>
    <id>http://kaineer.github.io/blog/2013/11/27/who-are-you</id>
    <content type="html"><![CDATA[<p>Кто ты такой, чтобы указывать мне, учить меня, исследовать меня, игнорировать меня?
Кто я такой, я сам, чтобы задавать вопросы и беспокоить кого бы то ни было?
Кто мы, кем мы будем, когда смысл вопросов перестанет быть смыслом?</p>

<p>В чём печаль? В том, что время, отпущенное нам, конечно.
Чему же тогда радоваться?</p>

<p>Радоваться стоит тому, что отпущенное нам время закончилось не вчера.
Оно закончилось не пять минут назад, не только что.
И это, само по себе, уже кое-что.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почему bluepill не мониторит мою задачу?]]></title>
    <link href="http://kaineer.github.io/blog/2013/09/26/daemonize-with-bluepill/"/>
    <updated>2013-09-26T13:09:00+06:00</updated>
    <id>http://kaineer.github.io/blog/2013/09/26/daemonize-with-bluepill</id>
    <content type="html"><![CDATA[<p>Случается <s>страшное</s> неприятное: падает процесс, поддерживающий работоспособность
вашего приложения и перестаёт ходить почта, обновляться данные и много чего ещё.
Узнаёте вы об этом из вопросов ваших пользователей, большая часть которых сводится
к фразе &ldquo;почему, собственно?&rdquo; Это если опустить все остальные, нецензурные слова.</p>

<p>Но, думаете вы себе, я же всё настроил, сказал <code>bluepill</code>, что вот мои процессы,
запускай их так-то и если процесс умер, запускай его снова? Возможно, что так
оно и есть, но процесс падает и не перезапускается. Так тоже бывает.</p>

<!-- more -->


<p>Что делать в этой ситуации? Первое, очевидное решение, которое мне в голову
пришло гораздо позже, чем должно было, посмотреть лог <code>bluepill</code>.
Там бывает много интересного, например сообщение о том, что приложение
слишком долго стартует и, возможно, оно не демонизировано.</p>

<p>Итак, что можно попробовать, в порядке убывания очевидности:</p>

<ul>
<li>Посмотреть статус процессов запущенных от лица bluepill, командой <code>bluepill status</code> &ndash; если обнаружены процессы со статусом <code>unmonitored</code> &ndash; это то самое, что мы и будем пытаться исправить дальше</li>
<li>Добавить в dsl-блок соответствующих процессов вызов <code>daemonize!</code> если он ещё не там. Это бывает, сам видел</li>
<li>Если и после этого в логе пишется (дальше вольный перевод с английского) &ldquo;Задача слишком долго стартует. Не буду её мониторить&rdquo;, попробуйте добавить <code>start_grace_time 30.seconds</code>. Количество секунд варьируется по запросам запускаемого приложения. Чтобы примерно прикинуть, сколько потребуется, запустите приложение ручками и умножьте время запуска на полтора</li>
<li>Ещё раз посмотрите, что там в логах, проверьте статус, может уже всё хорошо</li>
<li>Вы, кстати, перезагружали <code>bluepill</code> после каждого изменения конфигурации? Если нет, самое время попробовать. Между прочим: команда <code>bluepill stop</code> и последующая <code>bluepill start</code> не приводят к перечитыванию конфигурации. Рекомендую <code>bluepill quit</code> и <code>bluepill load /path/to/config_file</code>.</li>
</ul>


<p>Примерно этот список рекомендаций позволил бы мне сократить время копания
в гугле и попыток &ldquo;заставить всё работать&rdquo; примерно с часа до минут десяти,
или даже пяти :) Удачи.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caller &amp; Pry]]></title>
    <link href="http://kaineer.github.io/blog/2011/12/12/caller-and-pry/"/>
    <updated>2011-12-12T14:09:00+06:00</updated>
    <id>http://kaineer.github.io/blog/2011/12/12/caller-and-pry</id>
    <content type="html"><![CDATA[<p>Когда у меня отказывают мозги, я берусь за отладчик.
Если бы не необходимость писать код, я бы из него не вылезал вообще.
И отсутствие толкового отладчика в Ruby меня до сих пор очень расстраивает.</p>

<!-- more -->


<p>Представим себе ситуацию: в трёх практически одинаковых контроллерах по
совершенно идентичному набору параметров производятся абсолютно одинаковые
действия. Результат этих действий - заполненная этими действиями форма добавления
объекта в таблицу. Десять отличий между тремя вариантами найдены, вынесены в параметры,
всё отлично заполняется, но: в двух случаях заполненные данные попадают куда надо,
в третьем - хрррррр!</p>

<p>Начинаем копать всякие before_filter, фильтры в самой модели - ничего.</p>

<p>Отладчика, которым мне не больно и не противно было бы пользоваться, в наличии нет.
(Любители IDE идут в обнимку с их IDE куда-нибудь, где java не тормозит под убунтой).</p>

<p>Итак, отладчика нет, а брэйкпоинт поставить надо. Аккуратно добавляем в исследуемую модель
конструктор:</p>

<p><figure class='code'><figcaption><span>weird_model.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>и, как только pry выбрасывает нас в консоль, смотрим значение, возвращаемое caller.</p>

<p>В результате выяснилось, что второй экземпляр модели создавался во вьюхе.
Баг пофикшен, блогпост написан, кому уходит луч поноса - тоже ясно.</p>

<p>Осталось вычистить все binding.pry и всю байду, которую добавил в процессе отладки.</p>

<h2>Список используемой литературы</h2>

<ul>
<li><a href="http://pry.github.com/">PRY: Get to the code</a></li>
<li><a href="http://www.ruby-lang.org/en/">Ruby. A Programmer&rsquo;s Best Friend</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Оно работает! Но, блин, как..]]></title>
    <link href="http://kaineer.github.io/blog/2011/08/08/"/>
    <updated>2011-08-08T16:52:00+06:00</updated>
    <id>http://kaineer.github.io/blog/2011/08/</id>
    <content type="html"><![CDATA[<p>На днях исправлял чудесный, феерический баг в коде, уже успевшем стать древним (просто потому, что мой склероз прогрессирует заметно быстрее,
чем я пишу код). Вкратце, берётся инпут, обвешивается несколькими способами обработчиками, после чего в инпут вводится значение и..
и обработчики не работают!</p>

<!-- more -->


<p>Через минут двадцать я обнаруживаю, что $(искомый инпут).data() - девственно пуст. Ещё получаса мне хватило на то, чтобы додуматься почесать
скрипт grep-ом. И опаньки! В тот момент, когда инпут получает фокус я делаю (барабанная дробь) .unbind <em>без параметров</em>. (Старательно выношу матершинные слюни за скобки).</p>

<p><figure class='code'><figcaption><span>Никогда так не делайте - focus.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">input</span><span class="p">.</span><span class="nx">dummy_data</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">focus</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">val</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span>
</span><span class='line'>    <span class="nx">removeClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">dummy_data</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span>
</span><span class='line'>    <span class="nx">unbind</span><span class="p">();</span> <span class="c1">// Вот в этом месте все обработчики дружно собираются и уходят курить</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Мораль сей басни - учите, господа, матчасть. В своё время я использовал .unbind чтобы второй раз не вызывать обработчик по событию .focus.
И хотя самостоятельно отрубать себе же руки (хэндлы) я в виду не имел, но очень даже это сделал.</p>

<p>P.S.</p>

<p><figure class='code'><figcaption><span>Правильный вариант обработчика - focus.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">input</span><span class="p">.</span><span class="nx">dummy_data</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">focus</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$this</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Очищаем значение, как и планировалось</span>
</span><span class='line'>  <span class="nx">$this</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Убираем стиль, чтобы снять оформление</span>
</span><span class='line'>  <span class="nx">$this</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">dummy_data</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Аккуратно убираем обработчик события, не трогая остальные</span>
</span><span class='line'>  <span class="nx">$this</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">focus</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
